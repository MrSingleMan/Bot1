import asyncio
import config
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
import logging
import random
from keyboards import keyboard
from random_fox import fox


#–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=config.token)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≥—Ä–µ
user_games ={}

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command(commands=['start']))
async def start(message: types.Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!', reply_markup=keyboard)

@dp.message(Command(commands=['—Å—Ç–æ–ø']))
@dp.message(Command(commands=['stop']))
async def stop(message: types.Message):
    print(message.from_user.full_name)
    await message.answer(f'–ü–æ–∫–∞, {message.chat.first_name}!')

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /info
@dp.message(Command(commands=['info', '–∏–Ω—Ñ–æ']))
@dp.message(F.text.lower() == '–∏–Ω—Ñ–æ')
async def info(message: types.Message):
    info_text = (
        "ü§ñ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ*\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/info - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ\n\n"
        "/–∏–≥—Ä–∞ - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ'\n\n"
        "–ø–æ–∫–∞–∂–∏ –ª–∏—Å—É - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Å—ã\n\n"
    )
    await message.answer(info_text, parse_mode='Markdown')

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /game
@dp.message(Command(commands=['–∏–≥—Ä–∞']))
async def start_game(message: types.Message):
    user_id = message.from_user.id
    user_games[user_id] = {
        'number': random.randint(1, 10),
        'attempts': 3
    }
    await message.answer('–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å –µ–≥–æ! –£ —Ç–µ–±—è 3 –ø–æ–ø—ã—Ç–∫–∏.')

@dp.message(F.text.lower() == '–ø–æ–∫–∞–∂–∏ –ª–∏—Å—É')
async def info(message: types.Message):
    img_fox = fox()
    await message.answer('–ü—Ä–∏–≤–µ—Ç, –ª–æ–≤–∏ –ª–∏—Å—É')
    await message.answer_photo(img_fox)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ø—ã—Ç–æ–∫ —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ
@dp.message()
async def guess_number(message: types.Message):
    user_id = message.from_user.id

    if user_id not in user_games:
        return

    try:
        guess = int(message.text)
    except ValueError:
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.')
        return

    game = user_games[user_id]
    if guess < 1 or guess > 10:
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.')
        return

    if guess == game['number']:
        await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ!')
        del user_games[user_id]
    else:
        game['attempts'] -= 1
        if game['attempts'] > 0:
            hint = '–º–µ–Ω—å—à–µ' if guess > game['number'] else '–±–æ–ª—å—à–µ'
            await message.answer(f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ {hint} {guess}. –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {game["attempts"]} –ø–æ–ø—ã—Ç–æ–∫.')
        else:
            await message.answer(f'–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª! –Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ {game["number"]}.')
            del user_games[user_id]




async def main():
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == '__main__':
    asyncio.run(main())